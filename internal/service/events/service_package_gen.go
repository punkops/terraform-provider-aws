// Code generated by internal/generate/servicepackages/main.go; DO NOT EDIT.

package events

import (
	"context"

	aws_sdkv2 "github.com/aws/aws-sdk-go-v2/aws"
	eventbridge_sdkv2 "github.com/aws/aws-sdk-go-v2/service/eventbridge"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource{}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource{}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource{
		{
			Factory:  dataSourceBus,
			TypeName: "aws_cloudwatch_event_bus",
			Name:     "Event Bus",
		},
		{
			Factory:  dataSourceConnection,
			TypeName: "aws_cloudwatch_event_connection",
			Name:     "Connection",
		},
		{
			Factory:  dataSourceSource,
			TypeName: "aws_cloudwatch_event_source",
			Name:     "Source",
		},
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource{
		{
			Factory:  resourceAPIDestination,
			TypeName: "aws_cloudwatch_event_api_destination",
			Name:     "API Destination",
		},
		{
			Factory:  resourceArchive,
			TypeName: "aws_cloudwatch_event_archive",
			Name:     "Archive",
		},
		{
			Factory:  resourceBus,
			TypeName: "aws_cloudwatch_event_bus",
			Name:     "Event Bus",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  resourceBusPolicy,
			TypeName: "aws_cloudwatch_event_bus_policy",
			Name:     "Event Bus Policy",
		},
		{
			Factory:  resourceConnection,
			TypeName: "aws_cloudwatch_event_connection",
			Name:     "Connection",
		},
		{
			Factory:  resourceEndpoint,
			TypeName: "aws_cloudwatch_event_endpoint",
			Name:     "Global Endpoint",
		},
		{
			Factory:  resourcePermission,
			TypeName: "aws_cloudwatch_event_permission",
			Name:     "Permission",
		},
		{
			Factory:  resourceRule,
			TypeName: "aws_cloudwatch_event_rule",
			Name:     "Rule",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  resourceTarget,
			TypeName: "aws_cloudwatch_event_target",
			Name:     "Target",
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.Events
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*eventbridge_sdkv2.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws_sdkv2.Config))

	return eventbridge_sdkv2.NewFromConfig(cfg, func(o *eventbridge_sdkv2.Options) {
		if endpoint := config[names.AttrEndpoint].(string); endpoint != "" {
			tflog.Debug(ctx, "setting endpoint", map[string]any{
				"tf_aws.endpoint": endpoint,
			})
			o.BaseEndpoint = aws_sdkv2.String(endpoint)

			if o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled {
				tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
				o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
			}
		}
	}), nil
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
